<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-08-31T13:19:27+02:00</updated><id>/feed.xml</id><title type="html">JmbFountain</title><subtitle>Website of Johannes, here I write about all sorts of stuff I usually do, along with random other stuff
</subtitle><author><name>Johannes</name><email>jmb@smx.de</email></author><entry><title type="html">Figlet - easily create ascii art</title><link href="/blog/2021/08/31/figlet.html" rel="alternate" type="text/html" title="Figlet - easily create ascii art" /><published>2021-08-31T00:00:00+02:00</published><updated>2021-08-31T00:00:00+02:00</updated><id>/blog/2021/08/31/figlet</id><content type="html" xml:base="/blog/2021/08/31/figlet.html">&lt;p&gt;A small tool I have used for a few years for many purposes is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;figlet&lt;/code&gt;. You can use it to easily convert text into ASCII-Art of text.&lt;/p&gt;

&lt;p&gt;The most basic usage looks like this:&lt;/p&gt;

&lt;pre&gt;
&lt;font color=&quot;#8AE234&quot;&gt;&lt;b&gt;johannes&lt;/b&gt;&lt;/font&gt;:&lt;font color=&quot;#729FCF&quot;&gt;&lt;b&gt;~&lt;/b&gt;&lt;/font&gt;$ figlet text
 _            _   
| |_ _____  _| |_ 
| __/ _ \ \/ / __|
| ||  __/&amp;gt;  &amp;lt;| |_ 
 \__\___/_/\_\\__|
&lt;/pre&gt;

&lt;hr /&gt;
&lt;p&gt;Links:
Font library: [https://www.figlet.org/fontdb.cgi]&lt;/p&gt;</content><author><name>Johannes</name></author><category term="blog" /><summary type="html">A small tool I have used for a few years for many purposes is figlet. You can use it to easily convert text into ASCII-Art of text.</summary></entry><entry><title type="html">Setting up Gitlab CI/CD</title><link href="/blog/2021/08/27/gitlab-cicd-1.html" rel="alternate" type="text/html" title="Setting up Gitlab CI/CD" /><published>2021-08-27T00:00:00+02:00</published><updated>2021-08-27T00:00:00+02:00</updated><id>/blog/2021/08/27/gitlab-cicd-1</id><content type="html" xml:base="/blog/2021/08/27/gitlab-cicd-1.html">&lt;p&gt;My next step of optimizing my homelab (I am lazy, after all) was in building a functional ci/cd environment. Foolish as I am, I decided to start with my website.&lt;/p&gt;

&lt;p&gt;My current Website is statically generated using Jekyll. As a Theme I just stuck with Minima after doing a few modifications, namely reducing the content padding on the sides (I really dislike the huge white bars of nothing, my guess is they developed after people saw 16:9 screens and thought “look, how many more ads we can put on this”).&lt;/p&gt;

&lt;h2 id=&quot;part-1-getting-started&quot;&gt;&lt;strong&gt;Part 1: Getting started&lt;/strong&gt;&lt;/h2&gt;

&lt;h2 id=&quot;first-experiments&quot;&gt;First experiments&lt;/h2&gt;
&lt;p&gt;So, foolishly, I decided to use it as an apparently easy first start. My goal was to get a container out of it that I could just deploy to k3s.For me, the logical steps would be the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;take a baseline webserver image, e.g. nginx/latest&lt;/li&gt;
  &lt;li&gt;install ruby, jekyll, minima on it&lt;/li&gt;
  &lt;li&gt;build the website&lt;/li&gt;
  &lt;li&gt;move the assets to the webroot&lt;/li&gt;
  &lt;li&gt;remove everything I used to build&lt;/li&gt;
  &lt;li&gt;push the Image to Gitlabs container registry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Starting with the Dockerfile, I drafted up something like this:&lt;/p&gt;
&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; nginx:latest&lt;/span&gt;
apt-get install ruby-full build-essential zlib1g-dev -y
gem install jekyll bundler
jekyll clean
jekyll build
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; src/_site/ /usr/share/nginx/html/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 555 /usr/share/nginx/html
apt purge ruby-full build-essential zlib1g-dev -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;second-attempt&quot;&gt;Second attempt&lt;/h2&gt;
&lt;p&gt;However, for whatever reason, I couldn’t get this to work (If you have an idea, contact me).
So. I decided to split this into seperate jobs, building the Website files with the official jekyll-image and then using the build artifacts feature to then create a nginx-image with them in the webroot. At this stage, I don’t really care about ssl yet, since I’ll likely hand it over either to HAproxy or a k3s loadbalancer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/blog/2021-08-26-gitlab-pipelines.png&quot; alt=&quot;image-title-here&quot; class=&quot;img-responsive&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Okay, at least the pipeline in principle works, and it creates a website. The Issue with the second step largely stems from my peculiar setup: I have a privileged lxc container with nesting enabled as my docker-focused runner. Originally, I just installed one runner on it, with the docker executor. However, this gave me numerous problems with building the container:&lt;/p&gt;

&lt;h3 id=&quot;first-error&quot;&gt;First error:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error during connect: Post &quot;http://docker:2375/v1.24/auth&quot;: dial tcp: lookup docker on 192.168.178.1:53: no such host
Cleaning up file based variables 00:02
ERROR: Job failed: exit code 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Turns out I need to use the docker-in-docker image, which also needs TLS and privileged modus.
Fixed it, and:&lt;/p&gt;

&lt;h3 id=&quot;second-error&quot;&gt;Second error:&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: Preparation failed: Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: process_linux.go:508: setting cgroup config for procHooks process caused: failed to write &quot;a *:* rwm&quot;: write /sys/fs/cgroup/devices/docker/4d49d370f311465c887cbda64b69a84803606503586a571d38a85306714d08dd/devices.allow: operation not permitted: unknown (docker.go:392:0s)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And LXC containers, even privileged ones, can’t edit cgroups.&lt;/p&gt;

&lt;h2 id=&quot;changing-tactic&quot;&gt;Changing tactic&lt;/h2&gt;
&lt;p&gt;I decided that to best circumvent this docker-in-docker thing I’d just register another runner on the same container that uses shell as an executor, which would then just execute a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker build&lt;/code&gt;-command. This somehow gives me an even less useful error (“ERROR: Job failed: exit status 1”)&lt;/p&gt;

&lt;p&gt;At the end of this stage, my .gitlab-ci.yml looks like this:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;compile&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;container-build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jekyll-build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;compile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll/builder&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd src/&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll clean&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/_site/&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;webroot&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;container-build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;container-build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-builder&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker info&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker login -u cicd-container -p &amp;lt;TOKEN&amp;gt; gitlab.vj.home:5050&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t &quot;gitlab.vj.home:5050/johannes/www-jmbfountain-de:${CI_BUILD_REF}&quot; .&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker tag gitlab.vj.home:5050/johannes/www-jmbfountain-de:${CI_BUILD_REF} &quot;gitlab.vj.home:5050/johannes/www-jmbfountain-de:latest&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push gitlab.vj.home:5050/johannes/www-jmbfountain-de:${CI_BUILD_REF}&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push gitlab.vj.home:5050/johannes/www-jmbfountain-de:latest&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(The token is hard-coded in this iteration, after I get it working I can still delete it, and replace it with a safer alternative)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;part-2-working-ci&quot;&gt;&lt;strong&gt;Part 2: Working CI&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;(this was originally a second post, but I decided to merge it for readability)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;.gitlab-ci.yml:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;compile&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;container-build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;jekyll-build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;compile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll/builder&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cd src/&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll clean&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;artifacts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
            &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;src/_site/&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;webroot&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;container-build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;container-build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-builder&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;before_script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;unset cd&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker info&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;$CI_DEPLOY_USER $CI_DEPLOY_PASSWORD $CI_REGISTRY&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t $CI_REGISTRY/johannes/www-jmbfountain-de .&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker push $CI_REGISTRY/johannes/www-jmbfountain-de&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what did I do to fix this? Basically I read through the docs for login/auth for three hours and then figured out I should use a Deployment-Token called “gitlab-deploy-token”, and login using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker login -u $CI_DEPLOY_USER -p $CI_DEPLOY_PASSWORD $CI_REGISTRY&lt;/code&gt;. Now, it’s time to do the cd part of CI/CD, deploying the website to Kubernetes. However, to get that part done properly, I’ll have to first get my new network running, so there will be no more stuff like this for a while.&lt;/p&gt;

&lt;h2 id=&quot;part-3-automatic-deployment&quot;&gt;&lt;strong&gt;Part 3: Automatic Deployment&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;After first deciding to leave the Deployment aspect until I had Kubernetes running in my final environment, I decided to just hack together a small change that would make it possible to use this Pipeline for “Production” already: copy the changed files to the current webserver via ssh.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;deploy-lxc&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker-builder&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jekyll-build&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scp -r src/_site/* root@jmb-web-01:/var/www/html/&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And done! Now I can just write a blog post, commit &amp;amp; push to gitlab and it automatically ends up on my blog.&lt;/p&gt;</content><author><name>[&quot;Johannes&quot;]</name></author><category term="blog" /><summary type="html">My next step of optimizing my homelab (I am lazy, after all) was in building a functional ci/cd environment. Foolish as I am, I decided to start with my website.</summary></entry><entry><title type="html">K3s custom installation</title><link href="/blog/2021/08/19/k3s-configs.html" rel="alternate" type="text/html" title="K3s custom installation" /><published>2021-08-19T00:00:00+02:00</published><updated>2021-08-19T00:00:00+02:00</updated><id>/blog/2021/08/19/k3s-configs</id><content type="html" xml:base="/blog/2021/08/19/k3s-configs.html">&lt;p&gt;So I recently started learning Kubernetes stuff, for various reasons.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Game server deployment&lt;/li&gt;
  &lt;li&gt;Learning new stuff&lt;/li&gt;
  &lt;li&gt;It should be fun? Maybe? Hopefully?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I decided to name my project after a supercomputer in the German Science-Fiction Series Perry Rhodan, “NATHAN”, situated on the Moon. It provides compute power to many projects, like traffic control, weather control, or science. Especially in the first two cases, it is supported not just by the large “Datacenters” spanning large parts of the moon, but also has many smaller nodes spread across the solar system. I hope you can see the parallels to the way Kubernetes works, balancing workloads across both large compute units and small edge nodes.&lt;/p&gt;

&lt;h2 id=&quot;current-state&quot;&gt;Current state&lt;/h2&gt;
&lt;p&gt;I guess my current situation is fairly luxurious from the point of view of many other people. My main server is running Proxmox (currently v6.7) with a customized Debian 10 container template (at the time of writing this blogpost, Debian 11 has just released), which are, after being deployed, are managed by Ansible and monitored by Prometheus+Grafana.
Now, you might ask, why change this? For me, the most annoying part is that I have to deploy the LXC, then log into it, start the SSH server, wait for it to start (Low entropy means it needs forever to start), while doing so add the new host to my ansible Inventory and prometheus. Then I can proceed to install and configure the game server, e.g. Minecraft. My first Idea was to just install Docker on a container and just run all the game Servers on different ports, but that would become annoying when spinning up the 3rd minecraft server for a LAN party, forcing me to relocate it to a non-standard port.&lt;/p&gt;

&lt;h2 id=&quot;plan-as-it-stands-subject-to-change&quot;&gt;Plan as it stands (Subject to change)&lt;/h2&gt;
&lt;p&gt;Basically, I wanted a simple K3s setup that I can just spin up or down services on with minimal setup. Minecraft-Server with crossplay between Java and Bedrock Versions? Run a simple command. Because of the weird oddities my setup entails, I landed on the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;K3s: Lightweight, does all I want it to do, doesn’t waste my resources (this is all paid out of my personal pocket, remember!)&lt;/li&gt;
  &lt;li&gt;Metallb: Finally a way to expose Services on their individual IP addresses! (I’ll figure out a way to set the DNS records later)&lt;/li&gt;
  &lt;li&gt;Longhorn: Honestly, no Idea. I just didn’t want to have to handle an redundant NFS server, so I’ll try this.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My progress can be tracked on Github:
&lt;a href=&quot;https://github.com/JmbFountain/k3s-setup&quot;&gt;https://github.com/JmbFountain/k3s-setup&lt;/a&gt;
Feel Free to open issues, send pull requests or E-Mails with suggestions for Improvements!&lt;/p&gt;</content><author><name>[&quot;Johannes&quot;]</name></author><category term="blog" /><summary type="html">So I recently started learning Kubernetes stuff, for various reasons. Game server deployment Learning new stuff It should be fun? Maybe? Hopefully?</summary></entry></feed>